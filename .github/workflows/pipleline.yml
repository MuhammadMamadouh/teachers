name: Teachers SaaS CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  
jobs:
  # Stage 1: Code Quality & Static Analysis
  code-quality:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, pcre, curl
          tools: composer, phpstan, psalm, php-cs-fixer
          coverage: none
        
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-
        
      - name: Install PHP dependencies
        run: composer install --no-progress --prefer-dist --no-dev --optimize-autoloader
        
      - name: Run PHP Code Style Check
        run: |
          if [ -f .php-cs-fixer.php ]; then
            vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
          else
            echo "PHP CS Fixer config not found, skipping code style check"
          fi
        
      - name: Run PHPStan Static Analysis
        run: |
          if [ -f phpstan.neon ]; then
            vendor/bin/phpstan analyse --no-progress --error-format=github
          else
            echo "PHPStan config not found, creating basic analysis"
            echo "parameters:" > phpstan.neon
            echo "  level: 1" >> phpstan.neon
            echo "  paths:" >> phpstan.neon
            echo "    - app" >> phpstan.neon
            vendor/bin/phpstan analyse --no-progress --error-format=github || true
          fi
        
      - name: Run Security Check
        run: |
          # Check for known security vulnerabilities in dependencies
          composer audit || true
          
      - name: Lint PHP files
        run: |
          find app/ -name "*.php" -exec php -l {} \; | grep -v "No syntax errors"
          
  # Stage 2: Frontend Build & Test
  frontend:
    name: Frontend Build & Assets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        
      - name: Install Node dependencies
        run: npm ci
        
      - name: Run ESLint (if configured)
        run: |
          if [ -f .eslintrc.js ] || [ -f .eslintrc.json ]; then
            npm run lint || echo "ESLint not configured or failed"
          else
            echo "ESLint not configured, skipping"
          fi
        
      - name: Build assets
        run: npm run build
        
      - name: Upload built assets
        uses: actions/upload-artifact@v3
        with:
          name: built-assets
          path: public/build/
          retention-days: 1
          
  # Stage 3: Unit & Integration Tests
  tests:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
        test-suite: ['unit', 'feature', 'integration']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
          MYSQL_USER: testing
          MYSQL_PASSWORD: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
        
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, pcre, curl, redis
          coverage: xdebug
        
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-${{ matrix.php-version }}-
            composer-${{ runner.os }}-
        
      - name: Install PHP dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader
        
      - name: Download built assets
        uses: actions/download-artifact@v3
        with:
          name: built-assets
          path: public/build/
        
      - name: Copy environment file
        run: cp .env.example .env
        
      - name: Generate application key
        run: php artisan key:generate
        
      - name: Set database permissions
        run: |
          mysql -h127.0.0.1 -uroot -ppassword -e "GRANT ALL ON *.* TO 'testing'@'%'; FLUSH PRIVILEGES;"
        
      - name: Set up database
        run: |
          php artisan migrate --force
          php artisan db:seed --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
        
      - name: Run test suite
        run: |
          case "${{ matrix.test-suite }}" in
            "unit")
              php artisan test tests/Unit/ --coverage-clover=coverage-unit.xml
              ;;
            "feature")
              php artisan test tests/Feature/ --coverage-clover=coverage-feature.xml
              ;;
            "integration")
              php artisan test tests/Integration/ --coverage-clover=coverage-integration.xml || true
              ;;
          esac
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.test-suite }}-php${{ matrix.php-version }}
          path: coverage-*.xml
          retention-days: 5
          
  # Stage 4: Full Test Suite with Coverage
  full-test-suite:
    name: Complete Test Coverage
    runs-on: ubuntu-latest
    needs: [tests, frontend]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
          MYSQL_USER: testing
          MYSQL_PASSWORD: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
        
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, pcre, curl, redis
          coverage: xdebug
        
      - name: Install PHP dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader
        
      - name: Download built assets
        uses: actions/download-artifact@v3
        with:
          name: built-assets
          path: public/build/
        
      - name: Copy environment file
        run: cp .env.example .env
        
      - name: Generate application key
        run: php artisan key:generate
        
      - name: Set database permissions
        run: |
          mysql -h127.0.0.1 -uroot -ppassword -e "GRANT ALL ON *.* TO 'testing'@'%'; FLUSH PRIVILEGES;"
        
      - name: Set up database
        run: |
          php artisan migrate --force
          php artisan db:seed --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
        
      - name: Run complete test suite
        run: php artisan test --coverage --min=90 --coverage-clover=coverage.xml
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          
      - name: Run custom test runner
        run: php test-runner.php
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: testing
          DB_PASSWORD: testing
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: laravel
          name: laravel-coverage
          fail_ci_if_error: false
          
  # Stage 5: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, php
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        
  # Stage 6: Build Docker Image (if Dockerfile exists)
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [full-test-suite]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for Dockerfile
        id: dockerfile-check
        run: |
          if [ -f Dockerfile ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Set up Docker Buildx
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to Docker Hub
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
      - name: Build and push Docker image
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/teachers-saas:latest
            ${{ secrets.DOCKER_USERNAME }}/teachers-saas:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  # Stage 7: Deploy (only on main branch)
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [full-test-suite, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download built assets
        uses: actions/download-artifact@v3
        with:
          name: built-assets
          path: public/build/
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: rsync, scp, or deployment service API calls
          
      - name: Run deployment health check
        run: |
          echo "Running health checks..."
          # Add health check commands here
          # Example: curl checks, database connectivity tests
          
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '🚀 Teachers SaaS deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '❌ Teachers SaaS deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
  # Stage 8: Performance Testing (optional)
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Lighthouse CI
        run: |
          if [ -f lighthouserc.js ]; then
            npm install -g @lhci/cli@0.12.x
            lhci autorun
          else
            echo "Lighthouse CI not configured, skipping performance tests"
          fi
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
  # Stage 9: Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy, performance]
    if: always()
    
    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            built-assets
            coverage-*